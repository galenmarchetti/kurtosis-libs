// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `suite_registration_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct SuiteRegistrationResponse {
    // message fields
    pub suite_action: SuiteAction,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SuiteRegistrationResponse {
    fn default() -> &'a SuiteRegistrationResponse {
        <SuiteRegistrationResponse as ::protobuf::Message>::default_instance()
    }
}

impl SuiteRegistrationResponse {
    pub fn new() -> SuiteRegistrationResponse {
        ::std::default::Default::default()
    }

    // .api_container_api.SuiteAction suite_action = 1;


    pub fn get_suite_action(&self) -> SuiteAction {
        self.suite_action
    }
    pub fn clear_suite_action(&mut self) {
        self.suite_action = SuiteAction::SERIALIZE_SUITE_METADATA;
    }

    // Param is passed by value, moved
    pub fn set_suite_action(&mut self, v: SuiteAction) {
        self.suite_action = v;
    }
}

impl ::protobuf::Message for SuiteRegistrationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.suite_action, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.suite_action != SuiteAction::SERIALIZE_SUITE_METADATA {
            my_size += ::protobuf::rt::enum_size(1, self.suite_action);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.suite_action != SuiteAction::SERIALIZE_SUITE_METADATA {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.suite_action))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SuiteRegistrationResponse {
        SuiteRegistrationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SuiteAction>>(
                "suite_action",
                |m: &SuiteRegistrationResponse| { &m.suite_action },
                |m: &mut SuiteRegistrationResponse| { &mut m.suite_action },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SuiteRegistrationResponse>(
                "SuiteRegistrationResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SuiteRegistrationResponse {
        static instance: ::protobuf::rt::LazyV2<SuiteRegistrationResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SuiteRegistrationResponse::new)
    }
}

impl ::protobuf::Clear for SuiteRegistrationResponse {
    fn clear(&mut self) {
        self.suite_action = SuiteAction::SERIALIZE_SUITE_METADATA;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SuiteRegistrationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SuiteRegistrationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SuiteAction {
    SERIALIZE_SUITE_METADATA = 0,
    EXECUTE_TEST = 1,
}

impl ::protobuf::ProtobufEnum for SuiteAction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SuiteAction> {
        match value {
            0 => ::std::option::Option::Some(SuiteAction::SERIALIZE_SUITE_METADATA),
            1 => ::std::option::Option::Some(SuiteAction::EXECUTE_TEST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SuiteAction] = &[
            SuiteAction::SERIALIZE_SUITE_METADATA,
            SuiteAction::EXECUTE_TEST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SuiteAction>("SuiteAction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SuiteAction {
}

impl ::std::default::Default for SuiteAction {
    fn default() -> Self {
        SuiteAction::SERIALIZE_SUITE_METADATA
    }
}

impl ::protobuf::reflect::ProtobufValue for SuiteAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20suite_registration_service.proto\x12\x11api_container_api\x1a\x1bg\
    oogle/protobuf/empty.proto\"^\n\x19SuiteRegistrationResponse\x12A\n\x0cs\
    uite_action\x18\x01\x20\x01(\x0e2\x1e.api_container_api.SuiteActionR\x0b\
    suiteAction*=\n\x0bSuiteAction\x12\x1c\n\x18SERIALIZE_SUITE_METADATA\x10\
    \0\x12\x10\n\x0cEXECUTE_TEST\x10\x012s\n\x18SuiteRegistrationService\x12\
    W\n\rRegisterSuite\x12\x16.google.protobuf.Empty\x1a,.api_container_api.\
    SuiteRegistrationResponse\"\0J\xe5\x04\n\x06\x12\x04\0\0\x15\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\
    \0\x12\x03\x03\0%\n\n\n\x02\x06\0\x12\x04\x05\0\x07\x01\n\n\n\x03\x06\0\
    \x01\x12\x03\x05\x08\x20\n\x0b\n\x04\x06\0\x02\0\x12\x03\x06\x02Q\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03\x06\x06\x13\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\x06\x14)\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x064M\n\n\n\x02\
    \x04\0\x12\x04\t\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08!\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\n\x02\x1f\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\n\
    \x02\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\x0e\x1a\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\n\x1d\x1e\nn\n\x02\x05\0\x12\x04\x0e\0\x15\x01\x1ab\
    \x20Tells\x20the\x20suite\x20what\x20action\x20it\x20should\x20perform,\
    \x20based\x20on\x20the\x20args\x20that\x20the\x20API\x20container\x20rec\
    eived\n\n\n\n\x03\x05\0\x01\x12\x03\x0e\x05\x10\n\x86\x01\n\x04\x05\0\
    \x02\0\x12\x03\x11\x02\x1f\x1ay\x20Indicates\x20that\x20the\x20testsuite\
    \x20should\x20operate\x20in\x20metadata-serializing\x20mode,\x20sending\
    \x20suite\x20metadata\x20to\x20the\n\x20\x20API\x20container\n\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x11\x02\x1a\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x11\x1d\x1e\na\n\x04\x05\0\x02\x01\x12\x03\x14\x02\x13\x1aT\x20Indi\
    cates\x20that\x20the\x20testsuite\x20should\x20operate\x20in\x20test-exe\
    cuting\x20mode,\x20running\x20a\x20test\n\n\x0c\n\x05\x05\0\x02\x01\x01\
    \x12\x03\x14\x02\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x14\x11\x12b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
