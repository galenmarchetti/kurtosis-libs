// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `suite_metadata_serializing_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct TestSuiteMetadata {
    // message fields
    pub test_metadata: ::std::collections::HashMap<::std::string::String, TestMetadata>,
    pub network_width_bits: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestSuiteMetadata {
    fn default() -> &'a TestSuiteMetadata {
        <TestSuiteMetadata as ::protobuf::Message>::default_instance()
    }
}

impl TestSuiteMetadata {
    pub fn new() -> TestSuiteMetadata {
        ::std::default::Default::default()
    }

    // repeated .api_container_api.TestSuiteMetadata.TestMetadataEntry test_metadata = 1;


    pub fn get_test_metadata(&self) -> &::std::collections::HashMap<::std::string::String, TestMetadata> {
        &self.test_metadata
    }
    pub fn clear_test_metadata(&mut self) {
        self.test_metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_test_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, TestMetadata>) {
        self.test_metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_test_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, TestMetadata> {
        &mut self.test_metadata
    }

    // Take field
    pub fn take_test_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, TestMetadata> {
        ::std::mem::replace(&mut self.test_metadata, ::std::collections::HashMap::new())
    }

    // uint32 network_width_bits = 2;


    pub fn get_network_width_bits(&self) -> u32 {
        self.network_width_bits
    }
    pub fn clear_network_width_bits(&mut self) {
        self.network_width_bits = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_width_bits(&mut self, v: u32) {
        self.network_width_bits = v;
    }
}

impl ::protobuf::Message for TestSuiteMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TestMetadata>>(wire_type, is, &mut self.test_metadata)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.network_width_bits = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TestMetadata>>(1, &self.test_metadata);
        if self.network_width_bits != 0 {
            my_size += ::protobuf::rt::value_size(2, self.network_width_bits, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TestMetadata>>(1, &self.test_metadata, os)?;
        if self.network_width_bits != 0 {
            os.write_uint32(2, self.network_width_bits)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestSuiteMetadata {
        TestSuiteMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TestMetadata>>(
                "test_metadata",
                |m: &TestSuiteMetadata| { &m.test_metadata },
                |m: &mut TestSuiteMetadata| { &mut m.test_metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "network_width_bits",
                |m: &TestSuiteMetadata| { &m.network_width_bits },
                |m: &mut TestSuiteMetadata| { &mut m.network_width_bits },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TestSuiteMetadata>(
                "TestSuiteMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TestSuiteMetadata {
        static instance: ::protobuf::rt::LazyV2<TestSuiteMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TestSuiteMetadata::new)
    }
}

impl ::protobuf::Clear for TestSuiteMetadata {
    fn clear(&mut self) {
        self.test_metadata.clear();
        self.network_width_bits = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestSuiteMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestSuiteMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestMetadata {
    // message fields
    pub is_partitioning_enabled: bool,
    pub used_artifact_urls: ::std::collections::HashMap<::std::string::String, bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestMetadata {
    fn default() -> &'a TestMetadata {
        <TestMetadata as ::protobuf::Message>::default_instance()
    }
}

impl TestMetadata {
    pub fn new() -> TestMetadata {
        ::std::default::Default::default()
    }

    // bool is_partitioning_enabled = 1;


    pub fn get_is_partitioning_enabled(&self) -> bool {
        self.is_partitioning_enabled
    }
    pub fn clear_is_partitioning_enabled(&mut self) {
        self.is_partitioning_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_is_partitioning_enabled(&mut self, v: bool) {
        self.is_partitioning_enabled = v;
    }

    // repeated .api_container_api.TestMetadata.UsedArtifactUrlsEntry used_artifact_urls = 2;


    pub fn get_used_artifact_urls(&self) -> &::std::collections::HashMap<::std::string::String, bool> {
        &self.used_artifact_urls
    }
    pub fn clear_used_artifact_urls(&mut self) {
        self.used_artifact_urls.clear();
    }

    // Param is passed by value, moved
    pub fn set_used_artifact_urls(&mut self, v: ::std::collections::HashMap<::std::string::String, bool>) {
        self.used_artifact_urls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_used_artifact_urls(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, bool> {
        &mut self.used_artifact_urls
    }

    // Take field
    pub fn take_used_artifact_urls(&mut self) -> ::std::collections::HashMap<::std::string::String, bool> {
        ::std::mem::replace(&mut self.used_artifact_urls, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for TestMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_partitioning_enabled = tmp;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(wire_type, is, &mut self.used_artifact_urls)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_partitioning_enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(2, &self.used_artifact_urls);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_partitioning_enabled != false {
            os.write_bool(1, self.is_partitioning_enabled)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(2, &self.used_artifact_urls, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestMetadata {
        TestMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_partitioning_enabled",
                |m: &TestMetadata| { &m.is_partitioning_enabled },
                |m: &mut TestMetadata| { &mut m.is_partitioning_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(
                "used_artifact_urls",
                |m: &TestMetadata| { &m.used_artifact_urls },
                |m: &mut TestMetadata| { &mut m.used_artifact_urls },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TestMetadata>(
                "TestMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TestMetadata {
        static instance: ::protobuf::rt::LazyV2<TestMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TestMetadata::new)
    }
}

impl ::protobuf::Clear for TestMetadata {
    fn clear(&mut self) {
        self.is_partitioning_enabled = false;
        self.used_artifact_urls.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(suite_metadata_serializing_service.proto\x12\x11api_container_api\x1a\
    \x1bgoogle/protobuf/empty.proto\"\x80\x02\n\x11TestSuiteMetadata\x12[\n\
    \rtest_metadata\x18\x01\x20\x03(\x0b26.api_container_api.TestSuiteMetada\
    ta.TestMetadataEntryR\x0ctestMetadata\x12,\n\x12network_width_bits\x18\
    \x02\x20\x01(\rR\x10networkWidthBits\x1a`\n\x11TestMetadataEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\tR\x03key\x125\n\x05value\x18\x02\x20\x01(\
    \x0b2\x1f.api_container_api.TestMetadataR\x05value:\x028\x01\"\xf0\x01\n\
    \x0cTestMetadata\x126\n\x17is_partitioning_enabled\x18\x01\x20\x01(\x08R\
    \x15isPartitioningEnabled\x12c\n\x12used_artifact_urls\x18\x02\x20\x03(\
    \x0b25.api_container_api.TestMetadata.UsedArtifactUrlsEntryR\x10usedArti\
    factUrls\x1aC\n\x15UsedArtifactUrlsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x08R\x05value:\x028\
    \x012}\n!SuiteMetadataSerializationService\x12X\n\x16SerializeSuiteMetad\
    ata\x12$.api_container_api.TestSuiteMetadata\x1a\x16.google.protobuf.Emp\
    ty\"\0J\xd4\x03\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\0\x12\x03\x03\0%\n\
    \n\n\x02\x06\0\x12\x04\x05\0\x07\x01\n\n\n\x03\x06\0\x01\x12\x03\x05\x08\
    )\n\x0b\n\x04\x06\0\x02\0\x12\x03\x06\x02R\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x06\x06\x1c\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x06\x1d.\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03\x069N\n\n\n\x02\x04\0\x12\x04\t\0\x0e\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\t\x08\x19\n2\n\x04\x04\0\x02\0\x12\x03\x0b\
    \x02.\x1a%\x20Mapping\x20of\x20testName\x20->\x20testMetadata\n\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\x0b\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0b\x1c)\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b,-\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\r\x02\x20\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\t\x1b\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\r\x1e\x1f\n\n\n\x02\x04\x01\x12\x04\x10\0\x15\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x10\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x11\x02#\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x02\x06\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x11\x07\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x11!\"\n6\n\x04\x04\x01\x02\x01\x12\x03\x14\x02+\x1a)\x20\"Set\"\
    \x20of\x20artifact\x20URLs\x20used\x20by\x20the\x20test\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x03\x14\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x14\x14&\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x14)*b\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
