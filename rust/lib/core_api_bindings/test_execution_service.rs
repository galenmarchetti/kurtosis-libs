// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `test_execution_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct TestExecutionInfo {
    // message fields
    pub test_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestExecutionInfo {
    fn default() -> &'a TestExecutionInfo {
        <TestExecutionInfo as ::protobuf::Message>::default_instance()
    }
}

impl TestExecutionInfo {
    pub fn new() -> TestExecutionInfo {
        ::std::default::Default::default()
    }

    // string test_name = 1;


    pub fn get_test_name(&self) -> &str {
        &self.test_name
    }
    pub fn clear_test_name(&mut self) {
        self.test_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_test_name(&mut self, v: ::std::string::String) {
        self.test_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_test_name(&mut self) -> &mut ::std::string::String {
        &mut self.test_name
    }

    // Take field
    pub fn take_test_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.test_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TestExecutionInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.test_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.test_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.test_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.test_name.is_empty() {
            os.write_string(1, &self.test_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestExecutionInfo {
        TestExecutionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "test_name",
                |m: &TestExecutionInfo| { &m.test_name },
                |m: &mut TestExecutionInfo| { &mut m.test_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TestExecutionInfo>(
                "TestExecutionInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TestExecutionInfo {
        static instance: ::protobuf::rt::LazyV2<TestExecutionInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TestExecutionInfo::new)
    }
}

impl ::protobuf::Clear for TestExecutionInfo {
    fn clear(&mut self) {
        self.test_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestExecutionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestExecutionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterTestExecutionArgs {
    // message fields
    pub timeout_seconds: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterTestExecutionArgs {
    fn default() -> &'a RegisterTestExecutionArgs {
        <RegisterTestExecutionArgs as ::protobuf::Message>::default_instance()
    }
}

impl RegisterTestExecutionArgs {
    pub fn new() -> RegisterTestExecutionArgs {
        ::std::default::Default::default()
    }

    // uint64 timeout_seconds = 1;


    pub fn get_timeout_seconds(&self) -> u64 {
        self.timeout_seconds
    }
    pub fn clear_timeout_seconds(&mut self) {
        self.timeout_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_seconds(&mut self, v: u64) {
        self.timeout_seconds = v;
    }
}

impl ::protobuf::Message for RegisterTestExecutionArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout_seconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timeout_seconds != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timeout_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timeout_seconds != 0 {
            os.write_uint64(1, self.timeout_seconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterTestExecutionArgs {
        RegisterTestExecutionArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timeout_seconds",
                |m: &RegisterTestExecutionArgs| { &m.timeout_seconds },
                |m: &mut RegisterTestExecutionArgs| { &mut m.timeout_seconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterTestExecutionArgs>(
                "RegisterTestExecutionArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterTestExecutionArgs {
        static instance: ::protobuf::rt::LazyV2<RegisterTestExecutionArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterTestExecutionArgs::new)
    }
}

impl ::protobuf::Clear for RegisterTestExecutionArgs {
    fn clear(&mut self) {
        self.timeout_seconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterTestExecutionArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterTestExecutionArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterServiceArgs {
    // message fields
    pub service_id: ::std::string::String,
    pub partition_id: ::std::string::String,
    pub files_to_generate: ::std::collections::HashMap<::std::string::String, bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterServiceArgs {
    fn default() -> &'a RegisterServiceArgs {
        <RegisterServiceArgs as ::protobuf::Message>::default_instance()
    }
}

impl RegisterServiceArgs {
    pub fn new() -> RegisterServiceArgs {
        ::std::default::Default::default()
    }

    // string service_id = 1;


    pub fn get_service_id(&self) -> &str {
        &self.service_id
    }
    pub fn clear_service_id(&mut self) {
        self.service_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_id(&mut self, v: ::std::string::String) {
        self.service_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_id
    }

    // Take field
    pub fn take_service_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_id, ::std::string::String::new())
    }

    // string partition_id = 2;


    pub fn get_partition_id(&self) -> &str {
        &self.partition_id
    }
    pub fn clear_partition_id(&mut self) {
        self.partition_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_id(&mut self, v: ::std::string::String) {
        self.partition_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_id(&mut self) -> &mut ::std::string::String {
        &mut self.partition_id
    }

    // Take field
    pub fn take_partition_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.partition_id, ::std::string::String::new())
    }

    // repeated .api_container_api.RegisterServiceArgs.FilesToGenerateEntry files_to_generate = 3;


    pub fn get_files_to_generate(&self) -> &::std::collections::HashMap<::std::string::String, bool> {
        &self.files_to_generate
    }
    pub fn clear_files_to_generate(&mut self) {
        self.files_to_generate.clear();
    }

    // Param is passed by value, moved
    pub fn set_files_to_generate(&mut self, v: ::std::collections::HashMap<::std::string::String, bool>) {
        self.files_to_generate = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files_to_generate(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, bool> {
        &mut self.files_to_generate
    }

    // Take field
    pub fn take_files_to_generate(&mut self) -> ::std::collections::HashMap<::std::string::String, bool> {
        ::std::mem::replace(&mut self.files_to_generate, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for RegisterServiceArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.partition_id)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(wire_type, is, &mut self.files_to_generate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_id);
        }
        if !self.partition_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.partition_id);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(3, &self.files_to_generate);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service_id.is_empty() {
            os.write_string(1, &self.service_id)?;
        }
        if !self.partition_id.is_empty() {
            os.write_string(2, &self.partition_id)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(3, &self.files_to_generate, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterServiceArgs {
        RegisterServiceArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_id",
                |m: &RegisterServiceArgs| { &m.service_id },
                |m: &mut RegisterServiceArgs| { &mut m.service_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "partition_id",
                |m: &RegisterServiceArgs| { &m.partition_id },
                |m: &mut RegisterServiceArgs| { &mut m.partition_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(
                "files_to_generate",
                |m: &RegisterServiceArgs| { &m.files_to_generate },
                |m: &mut RegisterServiceArgs| { &mut m.files_to_generate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterServiceArgs>(
                "RegisterServiceArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterServiceArgs {
        static instance: ::protobuf::rt::LazyV2<RegisterServiceArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterServiceArgs::new)
    }
}

impl ::protobuf::Clear for RegisterServiceArgs {
    fn clear(&mut self) {
        self.service_id.clear();
        self.partition_id.clear();
        self.files_to_generate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterServiceArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterServiceArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterServiceResponse {
    // message fields
    pub generated_files_relative_filepaths: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub ip_addr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterServiceResponse {
    fn default() -> &'a RegisterServiceResponse {
        <RegisterServiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterServiceResponse {
    pub fn new() -> RegisterServiceResponse {
        ::std::default::Default::default()
    }

    // repeated .api_container_api.RegisterServiceResponse.GeneratedFilesRelativeFilepathsEntry generated_files_relative_filepaths = 1;


    pub fn get_generated_files_relative_filepaths(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.generated_files_relative_filepaths
    }
    pub fn clear_generated_files_relative_filepaths(&mut self) {
        self.generated_files_relative_filepaths.clear();
    }

    // Param is passed by value, moved
    pub fn set_generated_files_relative_filepaths(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.generated_files_relative_filepaths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_generated_files_relative_filepaths(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.generated_files_relative_filepaths
    }

    // Take field
    pub fn take_generated_files_relative_filepaths(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.generated_files_relative_filepaths, ::std::collections::HashMap::new())
    }

    // string ip_addr = 2;


    pub fn get_ip_addr(&self) -> &str {
        &self.ip_addr
    }
    pub fn clear_ip_addr(&mut self) {
        self.ip_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_addr(&mut self, v: ::std::string::String) {
        self.ip_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_addr(&mut self) -> &mut ::std::string::String {
        &mut self.ip_addr
    }

    // Take field
    pub fn take_ip_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip_addr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RegisterServiceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.generated_files_relative_filepaths)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip_addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.generated_files_relative_filepaths);
        if !self.ip_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ip_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.generated_files_relative_filepaths, os)?;
        if !self.ip_addr.is_empty() {
            os.write_string(2, &self.ip_addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterServiceResponse {
        RegisterServiceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "generated_files_relative_filepaths",
                |m: &RegisterServiceResponse| { &m.generated_files_relative_filepaths },
                |m: &mut RegisterServiceResponse| { &mut m.generated_files_relative_filepaths },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ip_addr",
                |m: &RegisterServiceResponse| { &m.ip_addr },
                |m: &mut RegisterServiceResponse| { &mut m.ip_addr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterServiceResponse>(
                "RegisterServiceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterServiceResponse {
        static instance: ::protobuf::rt::LazyV2<RegisterServiceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterServiceResponse::new)
    }
}

impl ::protobuf::Clear for RegisterServiceResponse {
    fn clear(&mut self) {
        self.generated_files_relative_filepaths.clear();
        self.ip_addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterServiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterServiceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartServiceArgs {
    // message fields
    pub service_id: ::std::string::String,
    pub docker_image: ::std::string::String,
    pub used_ports: ::std::collections::HashMap<::std::string::String, bool>,
    pub start_cmd_args: ::protobuf::RepeatedField<::std::string::String>,
    pub docker_env_vars: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub suite_execution_vol_mnt_dirpath: ::std::string::String,
    pub files_artifact_mount_dirpaths: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartServiceArgs {
    fn default() -> &'a StartServiceArgs {
        <StartServiceArgs as ::protobuf::Message>::default_instance()
    }
}

impl StartServiceArgs {
    pub fn new() -> StartServiceArgs {
        ::std::default::Default::default()
    }

    // string service_id = 1;


    pub fn get_service_id(&self) -> &str {
        &self.service_id
    }
    pub fn clear_service_id(&mut self) {
        self.service_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_id(&mut self, v: ::std::string::String) {
        self.service_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_id
    }

    // Take field
    pub fn take_service_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_id, ::std::string::String::new())
    }

    // string docker_image = 2;


    pub fn get_docker_image(&self) -> &str {
        &self.docker_image
    }
    pub fn clear_docker_image(&mut self) {
        self.docker_image.clear();
    }

    // Param is passed by value, moved
    pub fn set_docker_image(&mut self, v: ::std::string::String) {
        self.docker_image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_docker_image(&mut self) -> &mut ::std::string::String {
        &mut self.docker_image
    }

    // Take field
    pub fn take_docker_image(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.docker_image, ::std::string::String::new())
    }

    // repeated .api_container_api.StartServiceArgs.UsedPortsEntry used_ports = 3;


    pub fn get_used_ports(&self) -> &::std::collections::HashMap<::std::string::String, bool> {
        &self.used_ports
    }
    pub fn clear_used_ports(&mut self) {
        self.used_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_used_ports(&mut self, v: ::std::collections::HashMap<::std::string::String, bool>) {
        self.used_ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_used_ports(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, bool> {
        &mut self.used_ports
    }

    // Take field
    pub fn take_used_ports(&mut self) -> ::std::collections::HashMap<::std::string::String, bool> {
        ::std::mem::replace(&mut self.used_ports, ::std::collections::HashMap::new())
    }

    // repeated string start_cmd_args = 4;


    pub fn get_start_cmd_args(&self) -> &[::std::string::String] {
        &self.start_cmd_args
    }
    pub fn clear_start_cmd_args(&mut self) {
        self.start_cmd_args.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_cmd_args(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.start_cmd_args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_start_cmd_args(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.start_cmd_args
    }

    // Take field
    pub fn take_start_cmd_args(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.start_cmd_args, ::protobuf::RepeatedField::new())
    }

    // repeated .api_container_api.StartServiceArgs.DockerEnvVarsEntry docker_env_vars = 5;


    pub fn get_docker_env_vars(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.docker_env_vars
    }
    pub fn clear_docker_env_vars(&mut self) {
        self.docker_env_vars.clear();
    }

    // Param is passed by value, moved
    pub fn set_docker_env_vars(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.docker_env_vars = v;
    }

    // Mutable pointer to the field.
    pub fn mut_docker_env_vars(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.docker_env_vars
    }

    // Take field
    pub fn take_docker_env_vars(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.docker_env_vars, ::std::collections::HashMap::new())
    }

    // string suite_execution_vol_mnt_dirpath = 6;


    pub fn get_suite_execution_vol_mnt_dirpath(&self) -> &str {
        &self.suite_execution_vol_mnt_dirpath
    }
    pub fn clear_suite_execution_vol_mnt_dirpath(&mut self) {
        self.suite_execution_vol_mnt_dirpath.clear();
    }

    // Param is passed by value, moved
    pub fn set_suite_execution_vol_mnt_dirpath(&mut self, v: ::std::string::String) {
        self.suite_execution_vol_mnt_dirpath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suite_execution_vol_mnt_dirpath(&mut self) -> &mut ::std::string::String {
        &mut self.suite_execution_vol_mnt_dirpath
    }

    // Take field
    pub fn take_suite_execution_vol_mnt_dirpath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.suite_execution_vol_mnt_dirpath, ::std::string::String::new())
    }

    // repeated .api_container_api.StartServiceArgs.FilesArtifactMountDirpathsEntry files_artifact_mount_dirpaths = 7;


    pub fn get_files_artifact_mount_dirpaths(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.files_artifact_mount_dirpaths
    }
    pub fn clear_files_artifact_mount_dirpaths(&mut self) {
        self.files_artifact_mount_dirpaths.clear();
    }

    // Param is passed by value, moved
    pub fn set_files_artifact_mount_dirpaths(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.files_artifact_mount_dirpaths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files_artifact_mount_dirpaths(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.files_artifact_mount_dirpaths
    }

    // Take field
    pub fn take_files_artifact_mount_dirpaths(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.files_artifact_mount_dirpaths, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for StartServiceArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.docker_image)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(wire_type, is, &mut self.used_ports)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.start_cmd_args)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.docker_env_vars)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.suite_execution_vol_mnt_dirpath)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.files_artifact_mount_dirpaths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_id);
        }
        if !self.docker_image.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.docker_image);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(3, &self.used_ports);
        for value in &self.start_cmd_args {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.docker_env_vars);
        if !self.suite_execution_vol_mnt_dirpath.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.suite_execution_vol_mnt_dirpath);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.files_artifact_mount_dirpaths);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service_id.is_empty() {
            os.write_string(1, &self.service_id)?;
        }
        if !self.docker_image.is_empty() {
            os.write_string(2, &self.docker_image)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(3, &self.used_ports, os)?;
        for v in &self.start_cmd_args {
            os.write_string(4, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.docker_env_vars, os)?;
        if !self.suite_execution_vol_mnt_dirpath.is_empty() {
            os.write_string(6, &self.suite_execution_vol_mnt_dirpath)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.files_artifact_mount_dirpaths, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartServiceArgs {
        StartServiceArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_id",
                |m: &StartServiceArgs| { &m.service_id },
                |m: &mut StartServiceArgs| { &mut m.service_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "docker_image",
                |m: &StartServiceArgs| { &m.docker_image },
                |m: &mut StartServiceArgs| { &mut m.docker_image },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(
                "used_ports",
                |m: &StartServiceArgs| { &m.used_ports },
                |m: &mut StartServiceArgs| { &mut m.used_ports },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_cmd_args",
                |m: &StartServiceArgs| { &m.start_cmd_args },
                |m: &mut StartServiceArgs| { &mut m.start_cmd_args },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "docker_env_vars",
                |m: &StartServiceArgs| { &m.docker_env_vars },
                |m: &mut StartServiceArgs| { &mut m.docker_env_vars },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "suite_execution_vol_mnt_dirpath",
                |m: &StartServiceArgs| { &m.suite_execution_vol_mnt_dirpath },
                |m: &mut StartServiceArgs| { &mut m.suite_execution_vol_mnt_dirpath },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "files_artifact_mount_dirpaths",
                |m: &StartServiceArgs| { &m.files_artifact_mount_dirpaths },
                |m: &mut StartServiceArgs| { &mut m.files_artifact_mount_dirpaths },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartServiceArgs>(
                "StartServiceArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartServiceArgs {
        static instance: ::protobuf::rt::LazyV2<StartServiceArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartServiceArgs::new)
    }
}

impl ::protobuf::Clear for StartServiceArgs {
    fn clear(&mut self) {
        self.service_id.clear();
        self.docker_image.clear();
        self.used_ports.clear();
        self.start_cmd_args.clear();
        self.docker_env_vars.clear();
        self.suite_execution_vol_mnt_dirpath.clear();
        self.files_artifact_mount_dirpaths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartServiceArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartServiceArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveServiceArgs {
    // message fields
    pub service_id: ::std::string::String,
    pub container_stop_timeout_seconds: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveServiceArgs {
    fn default() -> &'a RemoveServiceArgs {
        <RemoveServiceArgs as ::protobuf::Message>::default_instance()
    }
}

impl RemoveServiceArgs {
    pub fn new() -> RemoveServiceArgs {
        ::std::default::Default::default()
    }

    // string service_id = 1;


    pub fn get_service_id(&self) -> &str {
        &self.service_id
    }
    pub fn clear_service_id(&mut self) {
        self.service_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_id(&mut self, v: ::std::string::String) {
        self.service_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_id
    }

    // Take field
    pub fn take_service_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_id, ::std::string::String::new())
    }

    // uint64 container_stop_timeout_seconds = 2;


    pub fn get_container_stop_timeout_seconds(&self) -> u64 {
        self.container_stop_timeout_seconds
    }
    pub fn clear_container_stop_timeout_seconds(&mut self) {
        self.container_stop_timeout_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_container_stop_timeout_seconds(&mut self, v: u64) {
        self.container_stop_timeout_seconds = v;
    }
}

impl ::protobuf::Message for RemoveServiceArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.container_stop_timeout_seconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_id);
        }
        if self.container_stop_timeout_seconds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.container_stop_timeout_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service_id.is_empty() {
            os.write_string(1, &self.service_id)?;
        }
        if self.container_stop_timeout_seconds != 0 {
            os.write_uint64(2, self.container_stop_timeout_seconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveServiceArgs {
        RemoveServiceArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_id",
                |m: &RemoveServiceArgs| { &m.service_id },
                |m: &mut RemoveServiceArgs| { &mut m.service_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "container_stop_timeout_seconds",
                |m: &RemoveServiceArgs| { &m.container_stop_timeout_seconds },
                |m: &mut RemoveServiceArgs| { &mut m.container_stop_timeout_seconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoveServiceArgs>(
                "RemoveServiceArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoveServiceArgs {
        static instance: ::protobuf::rt::LazyV2<RemoveServiceArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoveServiceArgs::new)
    }
}

impl ::protobuf::Clear for RemoveServiceArgs {
    fn clear(&mut self) {
        self.service_id.clear();
        self.container_stop_timeout_seconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveServiceArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveServiceArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepartitionArgs {
    // message fields
    pub partition_services: ::std::collections::HashMap<::std::string::String, PartitionServices>,
    pub partition_connections: ::std::collections::HashMap<::std::string::String, PartitionConnections>,
    pub default_connection: ::protobuf::SingularPtrField<PartitionConnectionInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepartitionArgs {
    fn default() -> &'a RepartitionArgs {
        <RepartitionArgs as ::protobuf::Message>::default_instance()
    }
}

impl RepartitionArgs {
    pub fn new() -> RepartitionArgs {
        ::std::default::Default::default()
    }

    // repeated .api_container_api.RepartitionArgs.PartitionServicesEntry partition_services = 1;


    pub fn get_partition_services(&self) -> &::std::collections::HashMap<::std::string::String, PartitionServices> {
        &self.partition_services
    }
    pub fn clear_partition_services(&mut self) {
        self.partition_services.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_services(&mut self, v: ::std::collections::HashMap<::std::string::String, PartitionServices>) {
        self.partition_services = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partition_services(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, PartitionServices> {
        &mut self.partition_services
    }

    // Take field
    pub fn take_partition_services(&mut self) -> ::std::collections::HashMap<::std::string::String, PartitionServices> {
        ::std::mem::replace(&mut self.partition_services, ::std::collections::HashMap::new())
    }

    // repeated .api_container_api.RepartitionArgs.PartitionConnectionsEntry partition_connections = 2;


    pub fn get_partition_connections(&self) -> &::std::collections::HashMap<::std::string::String, PartitionConnections> {
        &self.partition_connections
    }
    pub fn clear_partition_connections(&mut self) {
        self.partition_connections.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_connections(&mut self, v: ::std::collections::HashMap<::std::string::String, PartitionConnections>) {
        self.partition_connections = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partition_connections(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, PartitionConnections> {
        &mut self.partition_connections
    }

    // Take field
    pub fn take_partition_connections(&mut self) -> ::std::collections::HashMap<::std::string::String, PartitionConnections> {
        ::std::mem::replace(&mut self.partition_connections, ::std::collections::HashMap::new())
    }

    // .api_container_api.PartitionConnectionInfo default_connection = 3;


    pub fn get_default_connection(&self) -> &PartitionConnectionInfo {
        self.default_connection.as_ref().unwrap_or_else(|| <PartitionConnectionInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_default_connection(&mut self) {
        self.default_connection.clear();
    }

    pub fn has_default_connection(&self) -> bool {
        self.default_connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_connection(&mut self, v: PartitionConnectionInfo) {
        self.default_connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_connection(&mut self) -> &mut PartitionConnectionInfo {
        if self.default_connection.is_none() {
            self.default_connection.set_default();
        }
        self.default_connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_default_connection(&mut self) -> PartitionConnectionInfo {
        self.default_connection.take().unwrap_or_else(|| PartitionConnectionInfo::new())
    }
}

impl ::protobuf::Message for RepartitionArgs {
    fn is_initialized(&self) -> bool {
        for v in &self.default_connection {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionServices>>(wire_type, is, &mut self.partition_services)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnections>>(wire_type, is, &mut self.partition_connections)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.default_connection)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionServices>>(1, &self.partition_services);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnections>>(2, &self.partition_connections);
        if let Some(ref v) = self.default_connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionServices>>(1, &self.partition_services, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnections>>(2, &self.partition_connections, os)?;
        if let Some(ref v) = self.default_connection.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepartitionArgs {
        RepartitionArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionServices>>(
                "partition_services",
                |m: &RepartitionArgs| { &m.partition_services },
                |m: &mut RepartitionArgs| { &mut m.partition_services },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnections>>(
                "partition_connections",
                |m: &RepartitionArgs| { &m.partition_connections },
                |m: &mut RepartitionArgs| { &mut m.partition_connections },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartitionConnectionInfo>>(
                "default_connection",
                |m: &RepartitionArgs| { &m.default_connection },
                |m: &mut RepartitionArgs| { &mut m.default_connection },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepartitionArgs>(
                "RepartitionArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepartitionArgs {
        static instance: ::protobuf::rt::LazyV2<RepartitionArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepartitionArgs::new)
    }
}

impl ::protobuf::Clear for RepartitionArgs {
    fn clear(&mut self) {
        self.partition_services.clear();
        self.partition_connections.clear();
        self.default_connection.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepartitionArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepartitionArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionServices {
    // message fields
    pub service_id_set: ::std::collections::HashMap<::std::string::String, bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionServices {
    fn default() -> &'a PartitionServices {
        <PartitionServices as ::protobuf::Message>::default_instance()
    }
}

impl PartitionServices {
    pub fn new() -> PartitionServices {
        ::std::default::Default::default()
    }

    // repeated .api_container_api.PartitionServices.ServiceIdSetEntry service_id_set = 1;


    pub fn get_service_id_set(&self) -> &::std::collections::HashMap<::std::string::String, bool> {
        &self.service_id_set
    }
    pub fn clear_service_id_set(&mut self) {
        self.service_id_set.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_id_set(&mut self, v: ::std::collections::HashMap<::std::string::String, bool>) {
        self.service_id_set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_service_id_set(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, bool> {
        &mut self.service_id_set
    }

    // Take field
    pub fn take_service_id_set(&mut self) -> ::std::collections::HashMap<::std::string::String, bool> {
        ::std::mem::replace(&mut self.service_id_set, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for PartitionServices {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(wire_type, is, &mut self.service_id_set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(1, &self.service_id_set);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(1, &self.service_id_set, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionServices {
        PartitionServices::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBool>(
                "service_id_set",
                |m: &PartitionServices| { &m.service_id_set },
                |m: &mut PartitionServices| { &mut m.service_id_set },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionServices>(
                "PartitionServices",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartitionServices {
        static instance: ::protobuf::rt::LazyV2<PartitionServices> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartitionServices::new)
    }
}

impl ::protobuf::Clear for PartitionServices {
    fn clear(&mut self) {
        self.service_id_set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionServices {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionServices {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionConnections {
    // message fields
    pub connection_info: ::std::collections::HashMap<::std::string::String, PartitionConnectionInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionConnections {
    fn default() -> &'a PartitionConnections {
        <PartitionConnections as ::protobuf::Message>::default_instance()
    }
}

impl PartitionConnections {
    pub fn new() -> PartitionConnections {
        ::std::default::Default::default()
    }

    // repeated .api_container_api.PartitionConnections.ConnectionInfoEntry connection_info = 1;


    pub fn get_connection_info(&self) -> &::std::collections::HashMap<::std::string::String, PartitionConnectionInfo> {
        &self.connection_info
    }
    pub fn clear_connection_info(&mut self) {
        self.connection_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_info(&mut self, v: ::std::collections::HashMap<::std::string::String, PartitionConnectionInfo>) {
        self.connection_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_connection_info(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, PartitionConnectionInfo> {
        &mut self.connection_info
    }

    // Take field
    pub fn take_connection_info(&mut self) -> ::std::collections::HashMap<::std::string::String, PartitionConnectionInfo> {
        ::std::mem::replace(&mut self.connection_info, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for PartitionConnections {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnectionInfo>>(wire_type, is, &mut self.connection_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnectionInfo>>(1, &self.connection_info);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnectionInfo>>(1, &self.connection_info, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionConnections {
        PartitionConnections::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<PartitionConnectionInfo>>(
                "connection_info",
                |m: &PartitionConnections| { &m.connection_info },
                |m: &mut PartitionConnections| { &mut m.connection_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionConnections>(
                "PartitionConnections",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartitionConnections {
        static instance: ::protobuf::rt::LazyV2<PartitionConnections> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartitionConnections::new)
    }
}

impl ::protobuf::Clear for PartitionConnections {
    fn clear(&mut self) {
        self.connection_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionConnections {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionConnections {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionConnectionInfo {
    // message fields
    pub is_blocked: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionConnectionInfo {
    fn default() -> &'a PartitionConnectionInfo {
        <PartitionConnectionInfo as ::protobuf::Message>::default_instance()
    }
}

impl PartitionConnectionInfo {
    pub fn new() -> PartitionConnectionInfo {
        ::std::default::Default::default()
    }

    // bool is_blocked = 1;


    pub fn get_is_blocked(&self) -> bool {
        self.is_blocked
    }
    pub fn clear_is_blocked(&mut self) {
        self.is_blocked = false;
    }

    // Param is passed by value, moved
    pub fn set_is_blocked(&mut self, v: bool) {
        self.is_blocked = v;
    }
}

impl ::protobuf::Message for PartitionConnectionInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_blocked = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_blocked != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_blocked != false {
            os.write_bool(1, self.is_blocked)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionConnectionInfo {
        PartitionConnectionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_blocked",
                |m: &PartitionConnectionInfo| { &m.is_blocked },
                |m: &mut PartitionConnectionInfo| { &mut m.is_blocked },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionConnectionInfo>(
                "PartitionConnectionInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartitionConnectionInfo {
        static instance: ::protobuf::rt::LazyV2<PartitionConnectionInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartitionConnectionInfo::new)
    }
}

impl ::protobuf::Clear for PartitionConnectionInfo {
    fn clear(&mut self) {
        self.is_blocked = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionConnectionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionConnectionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ctest_execution_service.proto\x12\x11api_container_api\x1a\x1bgoogl\
    e/protobuf/empty.proto\"0\n\x11TestExecutionInfo\x12\x1b\n\ttest_name\
    \x18\x01\x20\x01(\tR\x08testName\"D\n\x19RegisterTestExecutionArgs\x12'\
    \n\x0ftimeout_seconds\x18\x01\x20\x01(\x04R\x0etimeoutSeconds\"\x84\x02\
    \n\x13RegisterServiceArgs\x12\x1d\n\nservice_id\x18\x01\x20\x01(\tR\tser\
    viceId\x12!\n\x0cpartition_id\x18\x02\x20\x01(\tR\x0bpartitionId\x12g\n\
    \x11files_to_generate\x18\x03\x20\x03(\x0b2;.api_container_api.RegisterS\
    erviceArgs.FilesToGenerateEntryR\x0ffilesToGenerate\x1aB\n\x14FilesToGen\
    erateEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05valu\
    e\x18\x02\x20\x01(\x08R\x05value:\x028\x01\"\xa5\x02\n\x17RegisterServic\
    eResponse\x12\x9c\x01\n\"generated_files_relative_filepaths\x18\x01\x20\
    \x03(\x0b2O.api_container_api.RegisterServiceResponse.GeneratedFilesRela\
    tiveFilepathsEntryR\x1fgeneratedFilesRelativeFilepaths\x12\x17\n\x07ip_a\
    ddr\x18\x02\x20\x01(\tR\x06ipAddr\x1aR\n$GeneratedFilesRelativeFilepaths\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\"\xcb\x05\n\x10StartServiceArgs\x12\
    \x1d\n\nservice_id\x18\x01\x20\x01(\tR\tserviceId\x12!\n\x0cdocker_image\
    \x18\x02\x20\x01(\tR\x0bdockerImage\x12Q\n\nused_ports\x18\x03\x20\x03(\
    \x0b22.api_container_api.StartServiceArgs.UsedPortsEntryR\tusedPorts\x12\
    $\n\x0estart_cmd_args\x18\x04\x20\x03(\tR\x0cstartCmdArgs\x12^\n\x0fdock\
    er_env_vars\x18\x05\x20\x03(\x0b26.api_container_api.StartServiceArgs.Do\
    ckerEnvVarsEntryR\rdockerEnvVars\x12D\n\x1fsuite_execution_vol_mnt_dirpa\
    th\x18\x06\x20\x01(\tR\x1bsuiteExecutionVolMntDirpath\x12\x86\x01\n\x1df\
    iles_artifact_mount_dirpaths\x18\x07\x20\x03(\x0b2C.api_container_api.St\
    artServiceArgs.FilesArtifactMountDirpathsEntryR\x1afilesArtifactMountDir\
    paths\x1a<\n\x0eUsedPortsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03k\
    ey\x12\x14\n\x05value\x18\x02\x20\x01(\x08R\x05value:\x028\x01\x1a@\n\
    \x12DockerEnvVarsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1aM\n\x1fFilesAr\
    tifactMountDirpathsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"w\n\x11RemoveSer\
    viceArgs\x12\x1d\n\nservice_id\x18\x01\x20\x01(\tR\tserviceId\x12C\n\x1e\
    container_stop_timeout_seconds\x18\x02\x20\x01(\x04R\x1bcontainerStopTim\
    eoutSeconds\"\xa7\x04\n\x0fRepartitionArgs\x12h\n\x12partition_services\
    \x18\x01\x20\x03(\x0b29.api_container_api.RepartitionArgs.PartitionServi\
    cesEntryR\x11partitionServices\x12q\n\x15partition_connections\x18\x02\
    \x20\x03(\x0b2<.api_container_api.RepartitionArgs.PartitionConnectionsEn\
    tryR\x14partitionConnections\x12Y\n\x12default_connection\x18\x03\x20\
    \x01(\x0b2*.api_container_api.PartitionConnectionInfoR\x11defaultConnect\
    ion\x1aj\n\x16PartitionServicesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\t\
    R\x03key\x12:\n\x05value\x18\x02\x20\x01(\x0b2$.api_container_api.Partit\
    ionServicesR\x05value:\x028\x01\x1ap\n\x19PartitionConnectionsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12=\n\x05value\x18\x02\x20\x01\
    (\x0b2'.api_container_api.PartitionConnectionsR\x05value:\x028\x01\"\xb2\
    \x01\n\x11PartitionServices\x12\\\n\x0eservice_id_set\x18\x01\x20\x03(\
    \x0b26.api_container_api.PartitionServices.ServiceIdSetEntryR\x0cservice\
    IdSet\x1a?\n\x11ServiceIdSetEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x08R\x05value:\x028\x01\"\
    \xeb\x01\n\x14PartitionConnections\x12d\n\x0fconnection_info\x18\x01\x20\
    \x03(\x0b2;.api_container_api.PartitionConnections.ConnectionInfoEntryR\
    \x0econnectionInfo\x1am\n\x13ConnectionInfoEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12@\n\x05value\x18\x02\x20\x01(\x0b2*.api_conta\
    iner_api.PartitionConnectionInfoR\x05value:\x028\x01\"8\n\x17PartitionCo\
    nnectionInfo\x12\x1d\n\nis_blocked\x18\x01\x20\x01(\x08R\tisBlocked2\xa5\
    \x04\n\x14TestExecutionService\x12V\n\x14GetTestExecutionInfo\x12\x16.go\
    ogle.protobuf.Empty\x1a$.api_container_api.TestExecutionInfo\"\0\x12_\n\
    \x15RegisterTestExecution\x12,.api_container_api.RegisterTestExecutionAr\
    gs\x1a\x16.google.protobuf.Empty\"\0\x12g\n\x0fRegisterService\x12&.api_\
    container_api.RegisterServiceArgs\x1a*.api_container_api.RegisterService\
    Response\"\0\x12M\n\x0cStartService\x12#.api_container_api.StartServiceA\
    rgs\x1a\x16.google.protobuf.Empty\"\0\x12O\n\rRemoveService\x12$.api_con\
    tainer_api.RemoveServiceArgs\x1a\x16.google.protobuf.Empty\"\0\x12K\n\
    \x0bRepartition\x12\".api_container_api.RepartitionArgs\x1a\x16.google.p\
    rotobuf.Empty\"\0J\x86-\n\x07\x12\x05\0\0\x83\x01\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\0\x12\
    \x03\x03\0%\n\n\n\x02\x06\0\x12\x04\x05\0\x19\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x05\x08\x1c\n\xc4\x01\n\x04\x06\0\x02\0\x12\x03\t\x02P\x1a\xb6\
    \x01\x20Returns\x20detailed\x20information\x20to\x20the\x20testsuite\x20\
    about\x20what\x20it\x20should\x20do\x20during\x20test\x20execution\x20-\
    \n\x20\x20namely,\x20what\x20test\x20it\x20should\x20run\n\x20This\x20me\
    thod\x20should\x20be\x20called\x20first\x20by\x20the\x20testsuite\n\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\t\x06\x1a\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\t\x1b0\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\t;L\nR\n\x04\x06\0\
    \x02\x01\x12\x03\x0c\x02Y\x1aE\x20Registers\x20that\x20the\x20testsuite\
    \x20is\x20about\x20to\x20start\x20executing\x20test\x20logic\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x0c\x06\x1b\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x0c\x1c5\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0c@U\n`\n\x04\
    \x06\0\x02\x02\x12\x03\x0f\x02O\x1aS\x20Registers\x20a\x20service\x20wit\
    h\x20the\x20API\x20container\x20but\x20doesn't\x20start\x20the\x20contai\
    ner\x20for\x20it\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0f\x06\x15\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0f\x16)\n\x0c\n\x05\x06\0\x02\x02\
    \x03\x12\x03\x0f4K\n[\n\x04\x06\0\x02\x03\x12\x03\x12\x02G\x1aN\x20Start\
    s\x20a\x20previously-registered\x20service\x20by\x20creating\x20a\x20Doc\
    ker\x20container\x20for\x20it\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \x12\x06\x12\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x12\x13#\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03\x12.C\nF\n\x04\x06\0\x02\x04\x12\x03\x15\x02I\
    \x1a9\x20Instructs\x20the\x20API\x20container\x20to\x20remove\x20the\x20\
    given\x20service\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x15\x06\x13\n\
    \x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x15\x14%\n\x0c\n\x05\x06\0\x02\x04\
    \x03\x12\x03\x150E\nJ\n\x04\x06\0\x02\x05\x12\x03\x18\x02E\x1a=\x20Instr\
    ucts\x20the\x20API\x20container\x20to\x20repartition\x20the\x20test\x20n\
    etwork\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x18\x06\x11\n\x0c\n\x05\
    \x06\0\x02\x05\x02\x12\x03\x18\x12!\n\x0c\n\x05\x06\0\x02\x05\x03\x12\
    \x03\x18,A\n\x87\x02\n\x02\x04\0\x12\x04\x1e\0!\x01\x1a\xfa\x01\x20=====\
    ========================================================================\
    =================\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20Get\x20Test\x20Execution\x20Info\n\x20======================\
    ========================================================================\
    \n\n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x19\nK\n\x04\x04\0\x02\0\x12\x03\
    \x20\x02\x17\x1a>\x20Name\x20of\x20the\x20test\x20that\x20the\x20testsui\
    te\x20container\x20should\x20execute\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x20\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x20\t\x12\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x20\x15\x16\n\x87\x02\n\x02\x04\x01\x12\x04\
    &\0*\x01\x1a\xfa\x01\x20================================================\
    ==============================================\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Register\x20Test\x20Execution\n\
    \x20====================================================================\
    ==========================\n\n\n\n\x03\x04\x01\x01\x12\x03&\x08!\n\xdc\
    \x01\n\x04\x04\x01\x02\0\x12\x03)\x02\x1d\x1a\xce\x01\x20TODO\x20This\
    \x20should\x20actually\x20be\x20unnecessary\x20-\x20we\x20should\x20pass\
    \x20in\x20testsuite\x20metadata\x20at\x20API\x20container\x20startup\x20\
    time,\n\x20\x20so\x20that\x20registration\x20just\x20says\x20\"I'm\x20st\
    arting\"\x20and\x20the\x20API\x20container\x20can\x20look\x20up\x20the\
    \x20timeout\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03)\t\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03)\
    \x1b\x1c\n\x83\x02\n\x02\x04\x02\x12\x04/\09\x01\x1a\xf6\x01\x20========\
    ========================================================================\
    ==============\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20Register\x20Service\n\x20===========================\
    ===================================================================\n\n\
    \n\n\x03\x04\x02\x01\x12\x03/\x08\x1b\nI\n\x04\x04\x02\x02\0\x12\x031\
    \x02\x18\x1a<\x20ID\x20that\x20will\x20be\x20used\x20to\x20identify\x20t\
    he\x20service\x20going\x20forward\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x031\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x031\t\x13\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x031\x16\x17\nD\n\x04\x04\x02\x02\x01\x12\x034\
    \x02\x1a\x1a7\x20If\x20emptystring,\x20the\x20default\x20partition\x20ID\
    \x20will\x20be\x20used\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x034\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x034\t\x15\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x034\x18\x19\n\xa8\x01\n\x04\x04\x02\x02\x02\x12\x038\
    \x02*\x1a\x9a\x01\x20\"Set\"\x20of\x20files\x20that\x20the\x20service\
    \x20needs\x20and\x20the\x20API\x20container\x20should\x20make\x20availab\
    le\x20upon\x20service\x20start\n\x20The\x20key\x20of\x20the\x20map\x20is\
    \x20a\x20user-meaningful\x20identifier\n\n\x0c\n\x05\x04\x02\x02\x02\x06\
    \x12\x038\x02\x13\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x038\x14%\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x038()\n\n\n\x02\x04\x03\x12\x04;\0B\x01\n\
    \n\n\x03\x04\x03\x01\x12\x03;\x08\x1f\n\x92\x01\n\x04\x04\x03\x02\0\x12\
    \x03>\x02=\x1a\x84\x01\x20Mapping\x20of\x20user-created\x20key\x20in\x20\
    the\x20request\x20->\x20filepath\x20(RELATIVE\x20to\x20the\x20suite\x20e\
    xecution\x20volume\x20root!)\x20where\n\x20\x20the\x20file\x20was\x20cre\
    ated\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03>\x02\x15\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03>\x168\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03>;<\nJ\
    \n\x04\x04\x03\x02\x01\x12\x03A\x02\x15\x1a=\x20The\x20IP\x20address\x20\
    that\x20the\x20service\x20will\x20receive\x20when\x20it\x20starts\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03A\t\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03A\x13\x14\
    \n\x83\x02\n\x02\x04\x04\x12\x04G\0\\\x01\x1a\xf6\x01\x20===============\
    ========================================================================\
    =======\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20Start\x20Service\n\x20======================\
    ========================================================================\
    \n\n\n\n\x03\x04\x04\x01\x12\x03G\x08\x18\nM\n\x04\x04\x04\x02\0\x12\x03\
    I\x02\x18\x1a@\x20ID\x20of\x20the\x20previously-registered\x20service\
    \x20that\x20should\x20be\x20started\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03I\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03I\t\x13\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03I\x16\x17\n\x0b\n\x04\x04\x04\x02\x01\x12\x03K\
    \x02\x1a\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03K\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03K\t\x15\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03K\x18\x19\n\xab\x01\n\x04\x04\x04\x02\x02\x12\x03O\x02#\x1a\x9d\x01\
    \x20\"Set\"\x20of\x20ports\x20that\x20the\x20running\x20service\x20will\
    \x20listen\x20on\n\x20This\x20is\x20a\x20string\x20because\x20it's\x20Do\
    cker\x20port\x20specification\x20syntax,\x20e.g.\x20\"80\"\x20(default\
    \x20TCP)\x20or\x20\"80/udp\"\n\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03O\
    \x02\x13\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03O\x14\x1e\n\x0c\n\x05\
    \x04\x04\x02\x02\x03\x12\x03O!\"\nn\n\x04\x04\x04\x02\x03\x12\x03R\x02%\
    \x1aa\x20String\x20array\x20indicating\x20the\x20command\x20that\x20shou\
    ld\x20be\x20run\x20inside\x20the\x20sevice's\x20container\x20on\x20start\
    up\n\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03R\x02\n\n\x0c\n\x05\x04\x04\
    \x02\x03\x05\x12\x03R\x0b\x11\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03R\
    \x12\x20\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03R#$\nY\n\x04\x04\x04\x02\
    \x04\x12\x03U\x02*\x1aL\x20Docker\x20environment\x20variables\x20that\
    \x20should\x20be\x20set\x20in\x20the\x20service's\x20container\n\n\x0c\n\
    \x05\x04\x04\x02\x04\x06\x12\x03U\x02\x15\n\x0c\n\x05\x04\x04\x02\x04\
    \x01\x12\x03U\x16%\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03U()\nw\n\x04\
    \x04\x04\x02\x05\x12\x03X\x02-\x1aj\x20The\x20full\x20path\x20where\x20t\
    he\x20API\x20container\x20should\x20execute\x20the\x20suite\x20execution\
    \x20volume\x20on\x20the\x20service\x20container\n\n\x0c\n\x05\x04\x04\
    \x02\x05\x05\x12\x03X\x02\x08\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03X\t\
    (\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03X+,\nZ\n\x04\x04\x04\x02\x06\
    \x12\x03[\x028\x1aM\x20Mapping\x20of\x20artifact_url\x20->\x20filepath_o\
    n_container_to_mount_artifact_contents\n\n\x0c\n\x05\x04\x04\x02\x06\x06\
    \x12\x03[\x02\x15\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x03[\x163\n\x0c\n\
    \x05\x04\x04\x02\x06\x03\x12\x03[67\n\x84\x02\n\x02\x04\x05\x12\x04a\0f\
    \x01\x1a\xf7\x01\x20====================================================\
    ==========================================\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Remove\x20Se\
    rvice\n\x20=============================================================\
    =================================\n\n\n\n\x03\x04\x05\x01\x12\x03a\x08\
    \x19\n\x0b\n\x04\x04\x05\x02\0\x12\x03b\x02\x18\n\x0c\n\x05\x04\x05\x02\
    \0\x05\x12\x03b\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03b\t\x13\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03b\x16\x17\nY\n\x04\x04\x05\x02\x01\
    \x12\x03e\x02,\x1aL\x20How\x20long\x20to\x20wait\x20for\x20the\x20servic\
    e\x20to\x20gracefully\x20stop\x20before\x20hard\x20killing\x20it\n\n\x0c\
    \n\x05\x04\x05\x02\x01\x05\x12\x03e\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03e\t'\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03e*+\n\x83\x02\n\
    \x02\x04\x06\x12\x04k\0u\x01\x1a\xf6\x01\x20============================\
    ==================================================================\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20Repartition\n\x20===================================\
    ===========================================================\n\n\n\n\x03\
    \x04\x06\x01\x12\x03k\x08\x17\nm\n\x04\x04\x06\x02\0\x12\x03m\x028\x1a`\
    \x20Definition\x20of\x20partitionId\x20->\x20services\x20that\x20should\
    \x20be\x20inside\x20the\x20partition\x20after\x20repartitioning\n\n\x0c\
    \n\x05\x04\x06\x02\0\x06\x12\x03m\x02\x20\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03m!3\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03m67\np\n\x04\x04\x06\
    \x02\x01\x12\x03p\x02>\x1ac\x20Definition\x20of\x20partitionIdA\x20->\
    \x20partitionIdB\x20->\x20information\x20defining\x20the\x20connection\
    \x20between\x20A\x20<->\x20B\n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03p\
    \x02#\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03p$9\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03p<=\n\x8a\x01\n\x04\x04\x06\x02\x02\x12\x03t\x021\x1a}\
    \x20Information\x20about\x20the\x20default\x20inter-partition\x20connect\
    ion\x20to\x20set\x20up\x20if\x20one\x20is\x20not\x20defined\x20in\x20the\
    \n\x20\x20partition\x20connections\x20map\n\n\x0c\n\x05\x04\x06\x02\x02\
    \x06\x12\x03t\x02\x19\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03t\x1a,\n\
    \x0c\n\x05\x04\x06\x02\x02\x03\x12\x03t/0\n\n\n\x02\x04\x07\x12\x04w\0z\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03w\x08\x19\n0\n\x04\x04\x07\x02\0\x12\
    \x03y\x02'\x1a#\x20\"Set\"\x20of\x20service\x20IDs\x20in\x20partition\n\
    \n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03y\x02\x13\n\x0c\n\x05\x04\x07\x02\
    \0\x01\x12\x03y\x14\"\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03y%&\n\n\n\x02\
    \x04\x08\x12\x04|\0~\x01\n\n\n\x03\x04\x08\x01\x12\x03|\x08\x1c\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03}\x02;\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03}\
    \x02&\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03}'6\n\x0c\n\x05\x04\x08\x02\0\
    \x03\x12\x03}9:\n\x0c\n\x02\x04\t\x12\x06\x80\x01\0\x83\x01\x01\n\x0b\n\
    \x03\x04\t\x01\x12\x04\x80\x01\x08\x1f\nM\n\x04\x04\t\x02\0\x12\x04\x82\
    \x01\x02\x16\x1a?\x20Whether\x20network\x20traffic\x20is\x20allowed\x20b\
    etween\x20the\x20two\x20partitions\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\
    \x82\x01\x02\x06\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x82\x01\x07\x11\n\r\n\
    \x05\x04\t\x02\0\x03\x12\x04\x82\x01\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
